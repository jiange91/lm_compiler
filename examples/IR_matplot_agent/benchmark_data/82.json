[
    {
        "id": 82,
        "simple_instruction": "I have a data named \"data.json\", showing the flow of energy in terawatt-hours (TWh).\nThe data.json file contains a dictionary at the root level with two keys: 'data' and 'layout'. Here's an overview of its structure:\n- 'data': This key corresponds to a list, and the length of this list is 1, indicating there is one primary data object. This object contains the following keys:\n  - 'type': Presumably indicates the type of plot or data representation.\n  - 'domain': Possibly specifies the domain or space in which the data is plotted.\n  - 'orientation': The orientation of the data visualization.\n  - 'valueformat': Format for numerical values, such as currency or percentages.\n  - 'valuesuffix': A suffix to append to the values, like units of measurement.\n  - 'node': An object containing information about the nodes in the Sankey diagram.\n  - 'link': An object containing information about the links between nodes in the Sankey diagram.\n- 'layout': This key corresponds to a dictionary that likely contains layout settings for the visualization, such as size, margins, titles, and other styling options.\nTo make a diagram showing energy flows using \"data.json\":\n1. Open the Data File: Start by opening the \"data.json\" file to read the energy data.\n2. Color Settings:\n  - Decide how see-through you want the link colors to be.\n  - Choose colors for each energy type or process, making sure they are a bit see-through too.\n3. Set Up Nodes:\n  - Nodes are the boxes or points that represent different types of energy or processes. Make sure each has a label and color.\n  - Adjust how far apart and how thick each node is.\n4. Set Up Links:\n  - Links are the arrows or lines that show the energy moving from one node to another. Make sure each has a starting point, an ending point, how much energy it represents, and a color.\n  - The color of the links should match the energy source or process it's coming from but a bit lighter.\n5. Finished Diagram:\n  - Your final diagram will show all the different types of energy on one side, what they're used for on the other, and all the energy flows between them. The thickness and color of each link will help show how much energy is moving.",
        "expert_instruction": "I have a data named \"data.json\", showing the flow of energy in terawatt-hours (TWh).\nThe data.json file contains a dictionary at the root level with two keys: 'data' and 'layout'. Here's an overview of its structure:\n- 'data': This key corresponds to a list, and the length of this list is 1, indicating there is one primary data object. This object contains the following keys:\n  - 'type': Presumably indicates the type of plot or data representation.\n  - 'domain': Possibly specifies the domain or space in which the data is plotted.\n  - 'orientation': The orientation of the data visualization.\n  - 'valueformat': Format for numerical values, such as currency or percentages.\n  - 'valuesuffix': A suffix to append to the values, like units of measurement.\n  - 'node': An object containing information about the nodes in the Sankey diagram.\n  - 'link': An object containing information about the links between nodes in the Sankey diagram.\n- 'layout': This key corresponds to a dictionary that likely contains layout settings for the visualization, such as size, margins, titles, and other styling options.\nEach of these keys ('node' and 'link' under 'data') likely holds further details about the nodes and links, respectively, such as labels, colors, sources, targets, and values. This structure is typical for a Plotly data object, where 'data' defines the figures and 'layout' defines how they're presented.\nPlot a sankey diagram to display energy sources on the left, uses and losses on the right, and links showing the flow of energy in terawatt-hours (TWh)\n1. **Read the JSON Data**:\n   Load your data with json.load(open('data.json', encoding='utf-8')).\n\n2. **Customize Node and Link Colors**: \n- Set an opacity level for the link colors (e.g., 0.4).\n- Change specific node colors to 'rgba' format to add opacity. For example, replace 'magenta' with its 'rgba' equivalent, ensuring transparency.\n\n3. **Sankey Diagram Nodes**: \n- Define nodes with padding, thickness, line color, labels, and custom colors using the node dictionary in go.Sankey.\n- Ensure the labels from the JSON data are correctly assigned.\n\n4. **Sankey Diagram Links**: \n- Define links with source indices, target indices, values, and colors using the link dictionary in go.Sankey.\n- Set the link colors to match the source node colors with adjusted opacity.\n\n5. **Figure Layout**: \n- Use fig.update_layout to set the title, including HTML formatting for links, and adjust font size.\n\n6. **Save the Figure**: \n- Save the Sankey diagram.\n\n7. **Resulting Diagram**: \n- The resulting diagram will display energy sources on the left, uses and losses on the right, and links showing the flow of energy in terawatt-hours (TWh).\n- The thickness and color intensity of the links correspond to the flow magnitude, with the color scheme reflecting the type of energy source or use."
    }
]