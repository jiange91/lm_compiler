import os

os.environ['DSP_CACHEBOOL'] = 'false'
os.environ["DSP_NOTEBOOK_CACHEDIR"] = os.path.join(os.getcwd(), 'cache')

import dspy
from dspy.evaluate import Evaluate
from dspy.datasets.hotpotqa import HotPotQA
from dspy.teleprompt import BootstrapFewShotWithRandomSearch
from cognify.utils import load_api_key

load_api_key('/mnt/ssd4/lm_compiler/secrets.toml')

gpt4o_mini = dspy.LM('gpt-4o-mini', max_tokens=1000)

dspy.configure(lm=gpt4o_mini)

from dsp.utils.utils import deduplicate

class CompleteCode(dspy.Signature):
    """
    Given an incomplete python function, complete the function body according to the provided docstring. Only the function body should be returned, and wrapped in <result> and </result> tags.
    """
    incomplete_function = dspy.InputField()
    complete_code = dspy.OutputField()

class RefineCode(dspy.Signature):
    """
    Given an incomplete python function and the function body generated by another agent, improve the code completion. Only the function body should be returned, and wrapped in <result> and </result> tags.
    """
    incomplete_function = dspy.InputField()
    complete_code = dspy.InputField()
    finalized_code = dspy.OutputField()   

class BasicCG(dspy.Module):
    def __init__(self):
        super().__init__()

        self.complete_code = dspy.ChainOfThought(CompleteCode)
        self.refine_code = dspy.ChainOfThought(RefineCode)

    def forward(self, incomplete_function):
        body = self.complete_code(incomplete_function=incomplete_function).complete_code
        refined_body = self.refine_code(incomplete_function=incomplete_function, complete_code=body).finalized_code
        return refined_body
    
if __name__ == '__main__':   
    from humaneval.humaneval import HumanEvalDataset, check_correctness_thread, check_correctness
    from workflow import score_fn
    
    agent = BasicCG()
    
    correct = 0
    dataset = HumanEvalDataset()
    """
    Simple test
    """
    size = 2
    for i in range(size):
        problem = dataset.data[i]
        code = agent(dataset.data[i]["prompt"])
        score = score_fn(problem, code)
        correct += score
        print(f"Test {i+1}: {score}") 
        
    print(f"Pass@1: {correct}/{size}, ({correct/size*100:.2f}%)")
