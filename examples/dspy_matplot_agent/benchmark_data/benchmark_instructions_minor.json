[
    {
        "id": 95,
        "simple_instruction": "Create a polar coordinate diagram using data from \"data.csv\" to display the highest temperatures on the first of each month in Amherst, spanning from January 1, 2004, to August 1, 2015. The data includes columns labeled \"Year,\" \"Date,\" and \"Temperature.\" The diagram should include:\n\n- 12 sectors, each representing a month of the year.\n- Temperature data plotted according to the corresponding month.\n- Circular points for the temperature data, slightly offset to prevent alignment along a single radial line.\n- Abbreviated labels for the months (Jan, Feb, Mar, etc.).\n- A blue curve that connects the data points from the year 2015.\n- A legend positioned on the right side of the diagram.\n- A title: \"Monthly Highest Temperature in Amherst (2004-2015).\"\nThe purpose of the diagram is to clearly illustrate the temperature trends and monthly variations over the years, with an emphasis on the data from 2015.",
        "expert_instruction": "I want a polar coordinate diagram to visualize the highest temperature data in Amherst on the first of each month, spanning from January 1, 2004, to August 1, 2015. The data is named \"data.csv\". The data contains three columns: \"Year,\" \"Date,\" and \"Temperature.\" Here are My specific requirements for the visualization:\n- The diagram should be divided into 12 sectors, corresponding to the months of the year.\n- Temperature data should be plotted on the diagram according to the month.\n- The points representing the temperature data should be circular.\n- These points should be slightly offset so as not to align on a single radial line, with each point for the 1st of a month positioned between that month and the next. The offset should range from 0 to \u03c0/6 radians.\n- Month labels should be abbreviated (Jan, Feb, Mar, etc.) instead of numerical (1, 2, 3, etc.).\n- A blue curve should connect the data points for the year 2015 to distinguish it from other years.\n- The legend should be moved to the right to avoid overlapping the diagram.\nThe diagram will serve as a clear visual representation of temperature trends and variations by month over several years, with particular emphasis on the data from 2015."
    },
    {
        "id": 84,
        "simple_instruction": "I want to create a phase diagram of water using Python. The data is in a file called 'data.csv'.\n\n- First, you should set up the chart with a horizontal axis for temperature and a vertical axis for pressure. These should be marked in Celsius, Kelvin, Pascals, bars and millibars, with conversions where necessary.\n- Next, you should use the data to draw the lines that separate the solid, liquid, and gas phases of water. Use columns 1 and 2 of data to draw the line that separates the solid, liquid, and gas phases. Use columns 3 and 4 to draw the line that separates the solid and liquid phases.\n- You should also mark two special points: the triple point at 273.16 K and 611.657 Pa, where solid, liquid, and gas coexist, and the critical point at 647.396 K and 22.064 MPa, where there's no difference between liquid and gas.\n- You should draw two vertical red lines to show the freezing and boiling points of water at normal pressure.\n- Make sure to label everything clearly, and color the different regions to show the solid, liquid, and gas phases.\n- Finally, you should add a grid to make the chart easier to read, and ensure the pressure scale is logarithmic, since phase diagrams often cover a wide range of pressures.",
        "expert_instruction": "Write a python script to draw the phase diagram of water with the provided data, named \"data.csv\":\n1. Prepare the Axes:\n- Create a horizontal axis for temperature, marking one scale in Celsius (0\u00b0C to 100\u00b0C) and another in Kelvin (273.15 K to 647.396 K). These scales should be aligned so that each temperature in Celsius matches its corresponding value in Kelvin.\n- Create a vertical axis for pressure, marking one scale in Pascals (from 611.657 Pa to 22.064 MPa, possibly using a logarithmic scale for better visualization) and another in bars and millibars. Align these scales so that, for example, 100 kPa corresponds with 1 bar.\n- Set X1 to x1 - 273.15 to convert Kelvin to Celsius for the top X-axis. Set Y1 to y1/100000 to convert Pascals to bars for the right Y-axis. Adjust the right Y-axis to have a Log10 scale type.\n2. Plot the Phase Boundaries:\n- Utilize columns 1 and 2 from your data to plot the boundary line between the solid, liquid, and gas phases, curving from the triple point to the critical point.\n- Use columns 3 and 4 to plot the boundary between solid and liquid phases, which typically curves less dramatically than the solid-liquid-gas line.\n3. Highlight Special Points:\n- Mark the triple point at 273.16 K and 611.657 Pa, where solid, liquid, and gas coexist.\n- Indicate the critical point at 647.396 K and 22.064 MPa, where the distinction between liquid and gas phases ends.\n4. Insert Red Lines:\n- Draw a vertical red line at 0\u00b0C and 273.15 K to represent the freezing point at 1 atm, intersecting the solid-liquid boundary.\n- Add another vertical red line at 100\u00b0C and 373.15 K for the boiling point at 1 atm, intersecting the liquid-gas boundary.\n5. Label and Color-Code:\n- Clearly label each axis with its respective units.\n- Color the different regions of the diagram to represent the solid (blue), liquid (green), and gas (yellow) phases.\n- Annotate the diagram with the special points and the red lines, including their corresponding temperature and pressure values.\n6. Grid and Scale:\n- It may be helpful to include a grid to accurately read off pressures and temperatures at various points on the diagram.\n- Ensure that the scale is logarithmic for pressure if you are spanning wide ranges, as phase diagrams often do."
    },
    {
        "id": 77,
        "simple_instruction": "I have data of protein consumption in 24 European countries named \"data.csv\". The column of data are [\"Country\",\"Red Meat\",\"White Meat\",\"Eggs\",\"Milk\",\"Fish\",\"Cereals\",\"Starch\",\"Nuts\",\"Fruits & Vegetables\"].\nWrite a Python code to visualize this data using a 2D scatter plot with K-Means clustering into three distinct color-coded clusters. The plot should include semi-transparent ellipses around each cluster, lines connecting data points to cluster centroids, and annotations for each point representing countries. It should be well-labeled and include a legend, aiming for clarity and visual grouping.",
        "expert_instruction": "I have data of protein consumption in 24 European countries named \"data.csv\". The column of data are [\"Country\",\"Red Meat\",\"White Meat\",\"Eggs\",\"Milk\",\"Fish\",\"Cereals\",\"Starch\",\"Nuts\",\"Fruits & Vegetables\"].\nWrite a python code to create an image of a 2D scatter plot representing a K-Means clustering of data. The plot should have three distinct clusters of points, each in its own color. For example, Cluster 0 could be blue, Cluster 1 could be red, and Cluster 2 could be green. Around each cluster, draw a semi-transparent ellipse in the same color as the cluster points but in a lighter shade, giving a sense of grouping. Connect each data point to the centroid of its cluster with a thick grey line. The background should have a grid, enhancing the plot's readability. Label the x-axis as 'Principal Component 1' and the y-axis as 'Principal Component 2'. Annotate each data point with a small text label close to it, which could be the names of countries for a realistic touch, but ensure the text is legible. The plot should have a title at the top: 'K-Means Clustering with PCA-reduced Data and Colored Ellipses'. Include a legend on the side, denoting the clusters with their respective colors."
    },
    {
        "id": 87,
        "simple_instruction": "Utilize the following data columns from 'data.csv' to create a sunburst plot:\n- 'country': for the names of the countries,\n- 'continent': to indicate which continent each country is in,\n- 'lifeExp': showing the expected lifespan in each country,\n- 'pop': representing the population of each country.\nYour chart should:\n- Organize the data hierarchically, starting with continents and then breaking down into countries.\n- Use the population of each country to determine the size of its segment in the chart.\n- Color code each segment by the country's expected lifespan, transitioning from red to blue across the range of values.\n- Set the central value of the color scale to the average lifespan, weighted by the population of the countries.\n- Finally, include a legend to help interpret the lifespan values as indicated by the color coding.",
        "expert_instruction": "Use data.csv to plot a sunburst chart.\n- The hierarchy is defined by the 'continent' and 'country' columns.\n- The size of each segment is determined by the 'pop' column (population).\n- The color of each segment is determined by the 'lifeExp' column (life expectancy).\n- The color scale is a diverging scale that goes from red to blue ('RdBu').\n- The midpoint of the color scale is the weighted average of the 'lifeExp' values, with the weights being the 'pop' values.\n- Add A color bar as a legend for the 'lifeExp' column."
    },
    {
        "id": 96,
        "simple_instruction": "Create a combination chart from the \"data.csv\" dataset, which contains sales data for various mobile phone brands across different quarters of the year. The columns in the CSV file are [\"Quarter\", \"Samsung\", \"Nokia/Microsoft\", \"Apple\", \"LG\", \"ZTE\", \"Huawei\"]. For each brand, create a box plot to represent the distribution of their sales data. On each box plot, display all the individual sales data points for that brand. Additionally, calculate the average sales for each brand and draw a line connecting these average values across the box plots. Use a consistent color scheme for the same quarter across different years, varying the shades to distinguish between years. Include a legend to aid in understanding the color coding.",
        "expert_instruction": "Write a Python code to create a combination chart from a dataset named \"data.csv\". The dataset contains sales data for various mobile phone brands (\"Samsung,\" \"Nokia/Microsoft,\" \"Apple,\" \"LG,\" \"ZTE,\" and \"Huawei\") across different quarters of the year titled \"Quarter\" (e.g., \"Q1 '10\" for the first quarter of 2010). The column of the CSV file is [\"Quarter\", \"Samsung\", \"Nokia/Microsoft\", \"Apple\", \"LG\", \"ZTE\", \"Huawei\"]. The chart should include a box plot for each brand showing the distribution of sales data across quarters, with individual sales data points represented as dots. Also, calculate the overall mean sales for each brand and draw a line connecting these points. Ensure the line points align with their respective box plots. Use a consistent color scheme for the same quarter across different years, varying the shades to distinguish between years. Include a legend to aid in understanding the color coding. The box plot should be the underlying layer, and the data points should be on top, ensuring visibility."
    },
    {
        "id": 82,
        "simple_instruction": "I have a data named \"data.json\", showing the flow of energy in terawatt-hours (TWh).\nThe data.json file contains a dictionary at the root level with two keys: 'data' and 'layout'. Here's an overview of its structure:\n- 'data': This key corresponds to a list, and the length of this list is 1, indicating there is one primary data object. This object contains the following keys:\n  - 'type': Presumably indicates the type of plot or data representation.\n  - 'domain': Possibly specifies the domain or space in which the data is plotted.\n  - 'orientation': The orientation of the data visualization.\n  - 'valueformat': Format for numerical values, such as currency or percentages.\n  - 'valuesuffix': A suffix to append to the values, like units of measurement.\n  - 'node': An object containing information about the nodes in the Sankey diagram.\n  - 'link': An object containing information about the links between nodes in the Sankey diagram.\n- 'layout': This key corresponds to a dictionary that likely contains layout settings for the visualization, such as size, margins, titles, and other styling options.\nTo make a diagram showing energy flows using \"data.json\":\n1. Open the Data File: Start by opening the \"data.json\" file to read the energy data.\n2. Color Settings:\n  - Decide how see-through you want the link colors to be.\n  - Choose colors for each energy type or process, making sure they are a bit see-through too.\n3. Set Up Nodes:\n  - Nodes are the boxes or points that represent different types of energy or processes. Make sure each has a label and color.\n  - Adjust how far apart and how thick each node is.\n4. Set Up Links:\n  - Links are the arrows or lines that show the energy moving from one node to another. Make sure each has a starting point, an ending point, how much energy it represents, and a color.\n  - The color of the links should match the energy source or process it's coming from but a bit lighter.\n5. Finished Diagram:\n  - Your final diagram will show all the different types of energy on one side, what they're used for on the other, and all the energy flows between them. The thickness and color of each link will help show how much energy is moving.",
        "expert_instruction": "I have a data named \"data.json\", showing the flow of energy in terawatt-hours (TWh).\nThe data.json file contains a dictionary at the root level with two keys: 'data' and 'layout'. Here's an overview of its structure:\n- 'data': This key corresponds to a list, and the length of this list is 1, indicating there is one primary data object. This object contains the following keys:\n  - 'type': Presumably indicates the type of plot or data representation.\n  - 'domain': Possibly specifies the domain or space in which the data is plotted.\n  - 'orientation': The orientation of the data visualization.\n  - 'valueformat': Format for numerical values, such as currency or percentages.\n  - 'valuesuffix': A suffix to append to the values, like units of measurement.\n  - 'node': An object containing information about the nodes in the Sankey diagram.\n  - 'link': An object containing information about the links between nodes in the Sankey diagram.\n- 'layout': This key corresponds to a dictionary that likely contains layout settings for the visualization, such as size, margins, titles, and other styling options.\nEach of these keys ('node' and 'link' under 'data') likely holds further details about the nodes and links, respectively, such as labels, colors, sources, targets, and values. This structure is typical for a Plotly data object, where 'data' defines the figures and 'layout' defines how they're presented.\nPlot a sankey diagram to display energy sources on the left, uses and losses on the right, and links showing the flow of energy in terawatt-hours (TWh)\n1. **Read the JSON Data**:\n   Load your data with json.load(open('data.json', encoding='utf-8')).\n\n2. **Customize Node and Link Colors**: \n- Set an opacity level for the link colors (e.g., 0.4).\n- Change specific node colors to 'rgba' format to add opacity. For example, replace 'magenta' with its 'rgba' equivalent, ensuring transparency.\n\n3. **Sankey Diagram Nodes**: \n- Define nodes with padding, thickness, line color, labels, and custom colors using the node dictionary in go.Sankey.\n- Ensure the labels from the JSON data are correctly assigned.\n\n4. **Sankey Diagram Links**: \n- Define links with source indices, target indices, values, and colors using the link dictionary in go.Sankey.\n- Set the link colors to match the source node colors with adjusted opacity.\n\n5. **Figure Layout**: \n- Use fig.update_layout to set the title, including HTML formatting for links, and adjust font size.\n\n6. **Save the Figure**: \n- Save the Sankey diagram.\n\n7. **Resulting Diagram**: \n- The resulting diagram will display energy sources on the left, uses and losses on the right, and links showing the flow of energy in terawatt-hours (TWh).\n- The thickness and color intensity of the links correspond to the flow magnitude, with the color scheme reflecting the type of energy source or use."
    },
    {
        "id": 86,
        "simple_instruction": "The data from the CSV file \"data.csv\" consists of a table where:\nThe first column lists the Windows operating system versions (WinXP, Win7, Win8.1, Win10).\nThe subsequent columns represent the years from 2015 to 2019.\nEach cell in the table contains the market share percentage of the corresponding Windows version for that year.\n- Create a doughnut chart titled \"Desktop Windows Version Market Share Worldwide,\" displaying the market share from 2015 to 2019.\n- Each concentric ring in the chart represents a different year, with the innermost ring representing 2015 and the outermost representing 2019.\n- Assign distinct color families to each Windows version (WinXP, Win7, Win8.1, Win10), with the colors progressively darkening for each subsequent year.\n- Directly annotate each segment with its respective market share percentage.\n- At the top of each ring, include a white section representing the market share of other operating systems for that year. Inside this white section, label the corresponding year.\n- Ensure that the white sections for all years are aligned at the top of their respective rings.\n- Place a legend in the central blank area of the doughnut chart, indicating the colors associated with each Windows version.\n- The design should align the white sections visually for easy comparison and maintain a uniform appearance.\nThis design will clearly showcase the market share changes of different Windows versions over time, while elegantly including data for other operating systems.",
        "expert_instruction": "The data from the CSV file \"data.csv\" consists of a table where:\nThe first column lists the Windows operating system versions (WinXP, Win7, Win8.1, Win10).\nThe subsequent columns represent the years from 2015 to 2019.\nThe column name is [\"Version\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\"].\nEach cell in the table contains the market share percentage of the corresponding Windows version for that year.\nWrite a Python code to draw a graph displaying the market share of various Windows versions from 2015 to 2019 using a doughnut chart with multiple tightly packed rings. Here are the specifications:\n- Title: The chart should be titled \"Desktop Windows Version Market Share Worldwide.\"\n- Rings: Each ring in the doughnut chart represents a year, starting from the center with 2015 and moving outwards to 2019. The rings should be tightly packed together, with no visible gaps between consecutive years.\n- Color Palettes: Different Windows versions are represented by distinct color palettes, with variations in shade for different years. For instance, WinXP could use a range of blue tones, Win7 red tones, Win8.1 green tones, and Win10 purple tones. The shades should progressively darken from the center to the outer rings to represent the passage of time from 2015 to 2019.\n- Segment Labels: Label segments with their respective market share percentages directly on them. The color shades should be lighter near the doughnut's center and darker towards the edge.\n- Other Versions: Use white segments to represent the market share of other Windows versions not listed. Each white segment should be positioned at the top of its respective ring, with all white segments across the years aligned vertically for visual consistency and easy comparison.\n- Legend: Include a legend at the chart's center, indicating which color palette corresponds to each Windows version.\n- Version Order: The order of the Windows versions should be the same for each year to achieve alignment. The reference order is WinXP, Win8.1, Win7, Win10.\nThe key addition here is the alignment of the white segments (representing other versions) at the top of each ring, ensuring they are vertically aligned across the years for a uniform appearance and straightforward comparison."
    },
    {
        "id": 93,
        "simple_instruction": "Create a 3D plot from a CSV file named \"data.csv\" using the columns \"t\", \"bond 1-2\", \"bond 1-14\", and \"tot energy / Eh\" to visualize an ab initio molecular dynamics (AIMD) calculation of an ion pair. The plot should have three axes: two for the bond lengths (\"bond 1-2\" and \"bond 1-14\") and one for the total energy in Hartrees (Eh). Color the points along the trajectory from red (start) to blue (end) using the jet color map to represent time progression. Include larger, semi-transparent markers for each point, with connecting lines to show the trajectory. Add semi-transparent projection lines onto the XY, XZ, and YZ planes in blue, red, and green, respectively. Include a legend for these projection lines and a color bar legend to indicate time in femtoseconds. Label the axes as \"Bond 1-2\", \"Bond 1-14\", and \"Total Energy / Eh\" and format the z-axis labels for clarity.",
        "expert_instruction": "Create a 3D plot that visualizes the trajectory of an ab initio molecular dynamics (AIMD) calculation of an ion pair. The data for this plot is loaded from a CSV file named \"data.csv\", using the columns \"t\", \"bond 1-2\", \"bond 1-14\", and \"tot energy / Eh\" for the three dimensions. The plot will have three axes: two representing selected bond lengths and one representing the total energy in Hartrees (Eh). \nThe points on the plot are colored according to time intervals, with the start of the trajectory in red and the end in blue. The color map and normalization for the trajectory points are defined using the jet color map from matplotlib. \nThe plot includes markers for each point on the trajectory, which are larger and semi-transparent. The trajectory is also represented with connecting lines between the points. \nIn addition to the 3D trajectory, the plot also includes semi-transparent projection lines onto the XY, XZ, and YZ planes. These projection lines are colored in blue, red, and green respectively. \nA legend is added to the plot for the projection lines. A color bar legend is also added on the left side of the plot, representing the time in femtoseconds. \nThe axes of the plot are labeled as \"Bond 1-2\", \"Bond 1-14\", and \"Total Energy / Eh\". The z-axis labels are formatted to reduce their length and prevent overlap."
    },
    {
        "id": 97,
        "simple_instruction": "Create two ternary phase diagrams from the dataset \"data.csv\", containing 'No.', 'IL (25\u00b0C)', 'toluene (25\u00b0C)', and 'n-heptane (25\u00b0C)'. Each row indicates a mixture composition of these components at 25\u00b0C, with 'No.' indicating different groups or conditions.\n\nFor both diagrams:\n- Title: \"Liquid-Liquid Phase Diagram\".\n\n1. Equilateral Triangle Diagram:\n  - Plot with 'toluene' at the top, 'n-heptane' at the bottom left, and 'IL' at the bottom right.\n  - Transform component fractions to Cartesian coordinates for an equilateral layout.\n  - Plot data points as circles, connect same 'No.' group points with dashed lines, and use different colors for each group.\n  - Label each vertex with the component name and draw borders for the triangle and remove axis ticks and labels for a clean look.\n2. Right-Angled Triangle Diagram:\n  - Plot with 'IL' on the vertical axis, 'toluene' on the horizontal axis, right angle at the bottom left.\n  - Transform for a right-angled layout, similarly plot and connect points, using the same color scheme.\n  - Label axes with 'IL' and 'toluene', and draw borders for the triangle and remove axis ticks and labels for a clean look.\nDisplay both diagrams side-by-side, maintaining an equal aspect ratio for comparison.",
        "expert_instruction": "Create two ternary phase diagrams using the provided dataset named \"data.csv\". The dataset contains columns 'No.', 'IL (25\u00b0C)', 'toluene (25\u00b0C)', and 'n-heptane (25\u00b0C)', where each row represents a unique mixture composition of these three components at 25\u00b0C. The 'No.' column categorizes the data into different groups or experimental conditions.\n\nFor both diagrams:\n- Title: \"Liquid-Liquid Phase Diagram\".\n\nEquilateral Triangle Diagram:\n\n- Plot an equilateral triangle ternary diagram.\n- Position 'toluene' at the top vertex, 'n-heptane' at the bottom left vertex, and 'IL' at the bottom right vertex.\n- Convert the component fractions to Cartesian coordinates suitable for an equilateral triangle layout.\n- Plot each data point as a circle and connect points within the same 'No.' group with dashed lines.\n- Use different colors for each 'No.' group and add a legend to distinguish these groups.\n- Label each vertex of the triangle with the corresponding component name.\n- Draw borders for the triangle and remove axis ticks and labels for a clean look.\n\nRight-Angled Triangle Diagram:\n\n- Plot a right-angled triangle ternary diagram.\n- Position 'IL' on the vertical axis, 'toluene' on the horizontal axis, and have the right angle at the bottom left corner.\n- Convert the component fractions to Cartesian coordinates suitable for a right-angled triangle layout.\n- Plot each data point as a circle and connect points within the same 'No.' group with dashed lines.\n- Use the same color scheme as the equilateral diagram for consistency, and include a legend.\n- Label the vertical and horizontal axes with 'IL' and 'toluene' respectively.\n- Draw borders for the triangle and remove axis ticks and labels for a clean look.\nEnsure both diagrams are plotted side-by-side for easy comparison, and maintain an equal aspect ratio for both diagrams."
    },
    {
        "id": 91,
        "simple_instruction": "Create a 3D Waterfall plot using the 'data.csv' file, where the first column represents time and the subsequent columns represent time-series data for different frequencies. Each frequency should be plotted as a separate line, distinctly colored and marked, and displayed on different y-coordinates to avoid overlap. For clarity, add a light grey fill below each line. Set the camera to -69 degrees azimuth and 15 degrees elevation for optimal viewing. Ensure the y-axis is elongated to twice the length of the x-axis to distinctly space the frequency lines. Remove y-axis ticks. Label the axes appropriately: 'Time (sec)' for the x-axis, 'Frequency (Hz)' for the y-axis, and 'Amplitude (a.u.)' for the z-axis.",
        "expert_instruction": "Create a 3D Waterfall plot using the 'data.csv' file, which consists of a first column for time and subsequent columns for time-series data representing different frequencies. Ensure the y-axis is elongated to twice the length of the x-axis to distinctly space the frequency lines. Each frequency should be plotted as a separate line, distinctly colored and marked, and displayed on different y-coordinates to avoid overlap. Below each line, add a light grey fill for visual clarity. Adjust the plot's camera to an azimuth of -69 degrees and an elevation of 15 degrees to prevent overlap and make the data more discernible. Remove the scale from the y-axis for a neater appearance. Label the axes appropriately: 'Time (sec)' for the x-axis, 'Frequency (Hz)' for the y-axis, and 'Amplitude (a.u.)' for the z-axis. The final plot should display with a customized aspect ratio highlighting the stretched y-axis."
    }
]