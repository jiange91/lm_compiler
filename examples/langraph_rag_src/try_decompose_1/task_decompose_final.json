{
    "direct_hyde": {
        "agents": {
            "QueryDecomposer": {
                "agent_prompt": "You are responsible for breaking down a user query into multiple sub-queries. Your goal is to ensure that these sub-queries cover comprehensive aspects of the original query without too much overlap. Please analyze the user query and generate a list of distinct sub-queries that address different facets of the topic.",
                "inputs_varaibles": [
                    "question"
                ],
                "output_json_schema": {
                    "title": "SubQuestionsSchema",
                    "description": "A list of sub-queries generated from the original question.",
                    "type": "object",
                    "properties": {
                        "sub_questions": {
                            "title": "Sub Questions",
                            "description": "A list of sub-topics",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "required": [
                        "sub_questions"
                    ]
                },
                "next_action": [
                    "PassageGenerator"
                ],
                "dynamic_action_decision": "None"
            },
            "PassageGenerator": {
                "agent_prompt": "You will receive a list of sub-queries from the QueryDecomposer. For each sub-query, your task is to generate a short passage that provides a clear and concise answer to that topic. Ensure that each passage is informative and directly addresses the corresponding sub-query.",
                "inputs_varaibles": [
                    "sub_questions"
                ],
                "output_json_schema": {
                    "title": "PassagesSchema",
                    "description": "A list of passages generated for the sub-queries.",
                    "type": "object",
                    "properties": {
                        "passages": {
                            "title": "Passages",
                            "description": "Passages generated for the sub-topics",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "required": [
                        "passages"
                    ]
                },
                "next_action": [
                    "END"
                ],
                "dynamic_action_decision": "None"
            }
        },
        "final_output_aggregator_code": "def combine_outputs(output_schema, sub_questions, passages):\n    return output_schema(sub_questions=sub_questions, passages=passages)"
    },
    "kalmv": {
        "agents": {
            "CheckAddressingQuestion": {
                "agent_prompt": "You are responsible for determining if the answer addresses the user question. If it does not, return 'ae'. If it does, return 'valid'.",
                "inputs_varaibles": [
                    "question",
                    "answer"
                ],
                "output_json_schema": {
                    "title": "AddressingDecisionSchema",
                    "description": "Decision on whether the answer addresses the question.",
                    "type": "object",
                    "properties": {
                        "addressing_decision": {
                            "title": "Addressing Decision",
                            "description": "Decision on whether the answer addresses the question, 'ae' or 'valid'.",
                            "type": "string",
                            "enum": [
                                "ae",
                                "valid"
                            ]
                        }
                    },
                    "required": [
                        "addressing_decision"
                    ]
                },
                "next_action": [
                    "CheckRelevance",
                    "END"
                ],
                "dynamic_action_decision": "def next_agent(addressing_decision): return ['END'] if addressing_decision == 'ae' else ['CheckRelevance']"
            },
            "CheckRelevance": {
                "agent_prompt": "You are responsible for checking the relevance of the provided knowledge to the user question. If the knowledge does not relate to the question, return 're'. If it is relevant, return 'valid'.",
                "inputs_varaibles": [
                    "question",
                    "knowledge"
                ],
                "output_json_schema": {
                    "title": "RelevanceDecisionSchema",
                    "description": "Decision on the relevance of the knowledge to the question.",
                    "type": "object",
                    "properties": {
                        "relevance_decision": {
                            "title": "Relevance Decision",
                            "description": "Decision on the relevance of the knowledge to the question, 're' or 'valid'.",
                            "type": "string",
                            "enum": [
                                "re",
                                "valid"
                            ]
                        }
                    },
                    "required": [
                        "relevance_decision"
                    ]
                },
                "next_action": [
                    "CheckGrounding",
                    "END"
                ],
                "dynamic_action_decision": "def next_agent(relevance_decision): return ['END'] if relevance_decision == 're' else ['CheckGrounding']"
            },
            "CheckGrounding": {
                "agent_prompt": "You are responsible for checking if the answer is grounded in the provided knowledge. If the answer does not reference or utilize the knowledge, return 'ge'. If it is grounded, return 'valid'.",
                "inputs_varaibles": [
                    "answer",
                    "knowledge"
                ],
                "output_json_schema": {
                    "title": "GroundingDecisionSchema",
                    "description": "Decision on whether the answer is grounded in the knowledge.",
                    "type": "object",
                    "properties": {
                        "grounding_decision": {
                            "title": "Grounding Decision",
                            "description": "Decision on whether the answer is grounded in the knowledge, 'ge' or 'valid'.",
                            "type": "string",
                            "enum": [
                                "ge",
                                "valid"
                            ]
                        }
                    },
                    "required": [
                        "grounding_decision"
                    ]
                },
                "next_action": [
                    "EvaluateAnswer",
                    "END"
                ],
                "dynamic_action_decision": "def next_agent(grounding_decision): return ['END'] if grounding_decision == 'ge' else ['EvaluateAnswer']"
            },
            "EvaluateAnswer": {
                "agent_prompt": "You are tasked with evaluating an answer based on a user question and provided knowledge. Follow these steps in order: 1. Check if the answer addresses the question. If it does not, grade it as 'ae'. 2. If the knowledge provided is irrelevant to the question, grade it as 're'. 3. If the answer is not grounded by the knowledge, grade it as 'ge'. 4. If none of the above conditions apply, grade the answer as 'accept'. Only one decision should be made.",
                "inputs_varaibles": [
                    "addressing_decision",
                    "relevance_decision",
                    "grounding_decision"
                ],
                "output_json_schema": {
                    "title": "FinalDecisionSchema",
                    "description": "Final decision based on the evaluations of addressing, relevance, and grounding.",
                    "type": "object",
                    "properties": {
                        "decision": {
                            "title": "Decision",
                            "description": "Final decision, 'ae', 're', 'ge', or 'accept'.",
                            "type": "string",
                            "enum": [
                                "ae",
                                "re",
                                "ge",
                                "accept"
                            ]
                        }
                    },
                    "required": [
                        "decision"
                    ]
                },
                "next_action": [
                    "END"
                ],
                "dynamic_action_decision": "None"
            }
        },
        "final_output_aggregator_code": "None"
    }
}