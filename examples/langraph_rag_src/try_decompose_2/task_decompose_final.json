{
    "direct_hyde": {
        "agents": {
            "Query Decomposer": {
                "agent_prompt": "You are responsible for breaking down a user query into several sub-queries. Your goal is to ensure that these sub-queries cover comprehensive aspects of the original query while minimizing overlap between them. Please analyze the user query provided to you and generate a list of sub-queries that fulfill these criteria.",
                "inputs_varaibles": [
                    "question"
                ],
                "output_json_schema": {
                    "title": "SubQuestionsSchema",
                    "description": "A list of sub-queries generated from the original query.",
                    "type": "object",
                    "properties": {
                        "sub_questions": {
                            "title": "Sub Questions",
                            "description": "A list of sub-topics",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "required": [
                        "sub_questions"
                    ]
                },
                "next_action": [
                    "Passage Generator"
                ],
                "dynamic_action_decision": "None"
            },
            "Passage Generator": {
                "agent_prompt": "You will receive a list of sub-queries generated by the Query Decomposer. For each sub-query, your task is to write a short passage that answers the specific topic addressed by that sub-query. Ensure that each passage is concise, informative, and directly related to its corresponding sub-query.",
                "inputs_varaibles": [
                    "sub_questions"
                ],
                "output_json_schema": {
                    "title": "PassagesSchema",
                    "description": "A list of passages generated for the sub-queries.",
                    "type": "object",
                    "properties": {
                        "passages": {
                            "title": "Passages",
                            "description": "Passages generated for the sub-topics",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "required": [
                        "passages"
                    ]
                },
                "next_action": [
                    "END"
                ],
                "dynamic_action_decision": "None"
            }
        },
        "final_output_aggregator_code": "def combine_outputs(output_schema, sub_questions, passages):\n    return output_schema(sub_questions=sub_questions, passages=passages)"
    },
    "kalmv": {
        "agents": {
            "Question Evaluation Agent": {
                "agent_prompt": "You are responsible for evaluating whether the provided answer addresses the user question. If the answer does not address the question, grade it as 'ae'. If it does address the question, pass the evaluation to the next agent.",
                "inputs_varaibles": [
                    "question",
                    "answer"
                ],
                "output_json_schema": {
                    "title": "QuestionEvaluationSchema",
                    "description": "Decision on whether the answer addresses the question.",
                    "type": "object",
                    "properties": {
                        "decision": {
                            "title": "Decision",
                            "description": "Decision on whether the answer addresses the question, 'ae' or pass to next agent.",
                            "enum": [
                                "ae",
                                "pass"
                            ],
                            "type": "string"
                        }
                    },
                    "required": [
                        "decision"
                    ]
                },
                "next_action": [
                    "Knowledge Relevance Agent",
                    "END"
                ],
                "dynamic_action_decision": "def next_agent(decision): return ['END'] if decision == 'ae' else ['Knowledge Relevance Agent']"
            },
            "Knowledge Relevance Agent": {
                "agent_prompt": "You are responsible for determining the relevance of the provided knowledge to the user question. If the knowledge is irrelevant to the question, grade it as 're'. If the knowledge is relevant, pass the evaluation to the next agent.",
                "inputs_varaibles": [
                    "question",
                    "knowledge"
                ],
                "output_json_schema": {
                    "title": "KnowledgeRelevanceSchema",
                    "description": "Decision on the relevance of the knowledge to the question.",
                    "type": "object",
                    "properties": {
                        "decision": {
                            "title": "Decision",
                            "description": "Decision on the relevance of the knowledge to the question, 're' or pass to next agent.",
                            "enum": [
                                "re",
                                "pass"
                            ],
                            "type": "string"
                        }
                    },
                    "required": [
                        "decision"
                    ]
                },
                "next_action": [
                    "Grounding Evaluation Agent",
                    "END"
                ],
                "dynamic_action_decision": "def next_agent(decision): return ['END'] if decision == 're' else ['Grounding Evaluation Agent']"
            },
            "Grounding Evaluation Agent": {
                "agent_prompt": "You are responsible for assessing whether the provided answer is grounded by the relevant knowledge. If the answer is not grounded by the knowledge, grade it as 'ge'. If the answer is grounded, grade it as 'accept'.",
                "inputs_varaibles": [
                    "answer",
                    "knowledge"
                ],
                "output_json_schema": {
                    "title": "GroundingEvaluationSchema",
                    "description": "Decision on whether the answer is grounded by the knowledge.",
                    "type": "object",
                    "properties": {
                        "decision": {
                            "title": "Decision",
                            "description": "Decision on whether the answer is grounded by the knowledge, 'ge' or 'accept'.",
                            "enum": [
                                "ge",
                                "accept"
                            ],
                            "type": "string"
                        }
                    },
                    "required": [
                        "decision"
                    ]
                },
                "next_action": [
                    "END"
                ],
                "dynamic_action_decision": "None"
            }
        },
        "final_output_aggregator_code": "None"
    }
}