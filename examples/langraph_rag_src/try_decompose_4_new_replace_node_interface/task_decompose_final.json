{
    "direct_hyde": {
        "agents": {
            "Query Decomposer": {
                "agent_prompt": "You are responsible for breaking down a user query into multiple sub-queries. Your goal is to ensure that these sub-queries cover comprehensive aspects of the original query while minimizing overlap. Please analyze the user query and generate a list of distinct sub-queries that address different facets of the topic.",
                "inputs_varaibles": [
                    "question"
                ],
                "output_json_schema": {
                    "title": "SubQuestionsSchema",
                    "description": "A list of sub-queries generated from the original question.",
                    "type": "object",
                    "properties": {
                        "sub_questions": {
                            "title": "Sub Questions",
                            "description": "A list of sub-queries",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "required": [
                        "sub_questions"
                    ]
                },
                "next_action": [
                    "Passage Generator"
                ],
                "dynamic_action_decision": "None"
            },
            "Passage Generator": {
                "agent_prompt": "You will receive a list of sub-queries from the Query Decomposer. For each sub-query, your task is to generate a short passage that provides a clear and concise answer to the topic addressed by the sub-query. Ensure that each passage is informative and directly related to its corresponding sub-query.",
                "inputs_varaibles": [
                    "sub_questions"
                ],
                "output_json_schema": {
                    "title": "PassagesSchema",
                    "description": "A list of passages generated for the sub-queries.",
                    "type": "object",
                    "properties": {
                        "passages": {
                            "title": "Passages",
                            "description": "A list of passages",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "required": [
                        "passages"
                    ]
                },
                "next_action": [
                    "END"
                ],
                "dynamic_action_decision": "None"
            }
        },
        "final_output_aggregator_code": "def combine_outputs(output_schema, sub_questions, passages):\n    return output_schema(sub_questions=sub_questions, passages=passages)"
    },
    "kalmv": {
        "agents": {
            "Question Evaluation Agent": {
                "agent_prompt": "You are responsible for evaluating whether the provided answer addresses the user question. Given the user question and the answer, determine if the answer directly addresses the question. If it does not, grade it as 'ae'. If it does, pass the evaluation to the next agent.",
                "inputs_varaibles": [
                    "question",
                    "answer"
                ],
                "output_json_schema": {
                    "title": "QuestionEvaluationSchema",
                    "description": "Decision on whether the answer addresses the user question.",
                    "type": "object",
                    "properties": {
                        "decision": {
                            "title": "Decision",
                            "description": "Decision on whether the answer addresses the user question, 'ae' or pass to next agent.",
                            "enum": [
                                "ae",
                                "re",
                                "ge",
                                "accept"
                            ],
                            "type": "string"
                        }
                    },
                    "required": [
                        "decision"
                    ]
                },
                "next_action": [
                    "Knowledge Relevance Agent",
                    "END"
                ],
                "dynamic_action_decision": "def next_agent(decision): return ['END'] if decision == 'ae' else ['Knowledge Relevance Agent']"
            },
            "Knowledge Relevance Agent": {
                "agent_prompt": "You are responsible for evaluating the relevance of the provided knowledge to the user question. Given the user question and the knowledge, determine if the knowledge is relevant to the question. If it is not relevant, grade it as 're'. If it is relevant, pass the evaluation to the next agent.",
                "inputs_varaibles": [
                    "question",
                    "knowledge"
                ],
                "output_json_schema": {
                    "title": "KnowledgeRelevanceSchema",
                    "description": "Decision on the relevance of the knowledge to the user question.",
                    "type": "object",
                    "properties": {
                        "decision": {
                            "title": "Decision",
                            "description": "Decision on the relevance of the knowledge to the user question, 're' or pass to next agent.",
                            "enum": [
                                "ae",
                                "re",
                                "ge",
                                "accept"
                            ],
                            "type": "string"
                        }
                    },
                    "required": [
                        "decision"
                    ]
                },
                "next_action": [
                    "Grounding Evaluation Agent",
                    "END"
                ],
                "dynamic_action_decision": "def next_agent(decision): return ['END'] if decision == 're' else ['Grounding Evaluation Agent']"
            },
            "Grounding Evaluation Agent": {
                "agent_prompt": "You are responsible for evaluating whether the provided answer is grounded by the relevant knowledge. Given the answer and the relevant knowledge, determine if the answer is supported by the knowledge. If it is not grounded, grade it as 'ge'. If it is grounded, grade it as 'accept'.",
                "inputs_varaibles": [
                    "answer",
                    "knowledge"
                ],
                "output_json_schema": {
                    "title": "GroundingEvaluationSchema",
                    "description": "Decision on whether the answer is grounded by the relevant knowledge.",
                    "type": "object",
                    "properties": {
                        "decision": {
                            "title": "Decision",
                            "description": "Decision on whether the answer is grounded by the relevant knowledge, 'ge' or 'accept'.",
                            "enum": [
                                "ae",
                                "re",
                                "ge",
                                "accept"
                            ],
                            "type": "string"
                        }
                    },
                    "required": [
                        "decision"
                    ]
                },
                "next_action": [
                    "END"
                ],
                "dynamic_action_decision": "None"
            }
        },
        "final_output_aggregator_code": "None"
    }
}