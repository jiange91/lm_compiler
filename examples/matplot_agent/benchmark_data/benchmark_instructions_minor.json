[
    {
        "simple_instruction": "Generate a series of boxplots using matplotlib and numpy libraries. The boxplots should include a basic plot, a notched plot, a plot with changed outlier point symbols, a plot without outlier points, a horizontal boxplot, and a plot with changed whisker length. The data for these plots should be randomly generated and reproducible. Each subplot should have one boxplot. The plots should be arranged in two rows and three columns.",
        "expert_instruction": "1. Import the required libraries: matplotlib.pyplot and numpy.\n2. Import the Polygon module from matplotlib.patches.\n3. Set the random seed for reproducibility using np.random.seed(19920215).\n4. Generate new fake data for the plot by creating arrays: spread, center, flier_high, flier_low, and data.\n   - Generate the spread array by multiplying np.random.rand(50) by 100.\n   - Generate the center array by multiplying np.ones(25) by 60.\n   - Generate the flier_high array by adding np.random.rand(10) multiplied by 100 to 150.\n   - Generate the flier_low array by multiplying np.random.rand(10) by -100.\n   - Concatenate the spread, center, flier_high, and flier_low arrays into the data array.\n5. Create a figure and subplots.\n6. Plot the basic boxplot on the first subplot and set the title to 'basic plot'.\n7. Plot a notched boxplot on the second subplot and set the title to 'notched plot'.\n8. Change the outlier point symbols on the third subplot and set the title to 'change outlier point symbols'.\n9. Create a boxplot without showing the outlier points on the fourth subplot and set the title to \"don't show outlier points\".\n10. Create a horizontal boxplot on the fifth subplot and set the title to 'horizontal boxes'.\n11. Change the whisker length on the sixth subplot and set the title to 'change whisker length'.\n12. Adjust the spacing and layout of the subplots using.\n13. Display the plot.",
        "id": 1
    },
    {
        "id": 95,
        "simple_instruction": "Create a polar coordinate diagram using data from \"data.csv\" to display the highest temperatures on the first of each month in Amherst, spanning from January 1, 2004, to August 1, 2015. The data includes columns labeled \"Year,\" \"Date,\" and \"Temperature.\" The diagram should include:\n\n- 12 sectors, each representing a month of the year.\n- Temperature data plotted according to the corresponding month.\n- Circular points for the temperature data, slightly offset to prevent alignment along a single radial line.\n- Abbreviated labels for the months (Jan, Feb, Mar, etc.).\n- A blue curve that connects the data points from the year 2015.\n- A legend positioned on the right side of the diagram.\n- A title: \"Monthly Highest Temperature in Amherst (2004-2015).\"\nThe purpose of the diagram is to clearly illustrate the temperature trends and monthly variations over the years, with an emphasis on the data from 2015.",
        "expert_instruction": "I want a polar coordinate diagram to visualize the highest temperature data in Amherst on the first of each month, spanning from January 1, 2004, to August 1, 2015. The data is named \"data.csv\". The data contains three columns: \"Year,\" \"Date,\" and \"Temperature.\" Here are My specific requirements for the visualization:\n- The diagram should be divided into 12 sectors, corresponding to the months of the year.\n- Temperature data should be plotted on the diagram according to the month.\n- The points representing the temperature data should be circular.\n- These points should be slightly offset so as not to align on a single radial line, with each point for the 1st of a month positioned between that month and the next. The offset should range from 0 to \u03c0/6 radians.\n- Month labels should be abbreviated (Jan, Feb, Mar, etc.) instead of numerical (1, 2, 3, etc.).\n- A blue curve should connect the data points for the year 2015 to distinguish it from other years.\n- The legend should be moved to the right to avoid overlapping the diagram.\nThe diagram will serve as a clear visual representation of temperature trends and variations by month over several years, with particular emphasis on the data from 2015."
    },
    {
        "id": 84,
        "simple_instruction": "I want to create a phase diagram of water using Python. The data is in a file called 'data.csv'.\n\n- First, you should set up the chart with a horizontal axis for temperature and a vertical axis for pressure. These should be marked in Celsius, Kelvin, Pascals, bars and millibars, with conversions where necessary.\n- Next, you should use the data to draw the lines that separate the solid, liquid, and gas phases of water. Use columns 1 and 2 of data to draw the line that separates the solid, liquid, and gas phases. Use columns 3 and 4 to draw the line that separates the solid and liquid phases.\n- You should also mark two special points: the triple point at 273.16 K and 611.657 Pa, where solid, liquid, and gas coexist, and the critical point at 647.396 K and 22.064 MPa, where there's no difference between liquid and gas.\n- You should draw two vertical red lines to show the freezing and boiling points of water at normal pressure.\n- Make sure to label everything clearly, and color the different regions to show the solid, liquid, and gas phases.\n- Finally, you should add a grid to make the chart easier to read, and ensure the pressure scale is logarithmic, since phase diagrams often cover a wide range of pressures.",
        "expert_instruction": "Write a python script to draw the phase diagram of water with the provided data, named \"data.csv\":\n1. Prepare the Axes:\n- Create a horizontal axis for temperature, marking one scale in Celsius (0\u00b0C to 100\u00b0C) and another in Kelvin (273.15 K to 647.396 K). These scales should be aligned so that each temperature in Celsius matches its corresponding value in Kelvin.\n- Create a vertical axis for pressure, marking one scale in Pascals (from 611.657 Pa to 22.064 MPa, possibly using a logarithmic scale for better visualization) and another in bars and millibars. Align these scales so that, for example, 100 kPa corresponds with 1 bar.\n- Set X1 to x1 - 273.15 to convert Kelvin to Celsius for the top X-axis. Set Y1 to y1/100000 to convert Pascals to bars for the right Y-axis. Adjust the right Y-axis to have a Log10 scale type.\n2. Plot the Phase Boundaries:\n- Utilize columns 1 and 2 from your data to plot the boundary line between the solid, liquid, and gas phases, curving from the triple point to the critical point.\n- Use columns 3 and 4 to plot the boundary between solid and liquid phases, which typically curves less dramatically than the solid-liquid-gas line.\n3. Highlight Special Points:\n- Mark the triple point at 273.16 K and 611.657 Pa, where solid, liquid, and gas coexist.\n- Indicate the critical point at 647.396 K and 22.064 MPa, where the distinction between liquid and gas phases ends.\n4. Insert Red Lines:\n- Draw a vertical red line at 0\u00b0C and 273.15 K to represent the freezing point at 1 atm, intersecting the solid-liquid boundary.\n- Add another vertical red line at 100\u00b0C and 373.15 K for the boiling point at 1 atm, intersecting the liquid-gas boundary.\n5. Label and Color-Code:\n- Clearly label each axis with its respective units.\n- Color the different regions of the diagram to represent the solid (blue), liquid (green), and gas (yellow) phases.\n- Annotate the diagram with the special points and the red lines, including their corresponding temperature and pressure values.\n6. Grid and Scale:\n- It may be helpful to include a grid to accurately read off pressures and temperatures at various points on the diagram.\n- Ensure that the scale is logarithmic for pressure if you are spanning wide ranges, as phase diagrams often do."
    }
]